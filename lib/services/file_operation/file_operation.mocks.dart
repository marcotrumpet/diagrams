// Mocks generated by Mockito 5.1.0 from annotations
// in diagrams/services/file_operation/file_operation.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:typed_data' as _i5;

import 'package:diagrams/services/file_operation/file_operation.dart' as _i2;
import 'package:file_selector/file_selector.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [FileOperationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileOperationService extends _i1.Mock
    implements _i2.FileOperationService {
  MockFileOperationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String?> getPath() =>
      (super.noSuchMethod(Invocation.method(#getPath, []),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  _i3.Future<_i4.XFile?> openFromDisk() =>
      (super.noSuchMethod(Invocation.method(#openFromDisk, []),
          returnValue: Future<_i4.XFile?>.value()) as _i3.Future<_i4.XFile?>);
  @override
  _i3.Future<bool> saveOnDisk({_i5.Uint8List? data, String? path}) =>
      (super.noSuchMethod(
          Invocation.method(#saveOnDisk, [], {#data: data, #path: path}),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
